<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_roo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isGrabbed = 0;
isLaunched = 0;
steps = 10;
currentStep = 0;
for (var i = 0; i &lt; 5; i++){
    prevX[i] = 0;
    prevY[i] = 0;
}
cumulativeMomentum = 0;
cumulativeDirection = 0;

animUp = 1;
imgInd = 0;
rot = 0;
rotSpeed = 0;

l = 0; //length
h = 0; //height

isDuck = global.upgrades[? "Suit"] &gt; 0;
hasFloaters = global.upgrades[? "Floaters"] &gt; 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>STATS</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if (variable_global_exists("upgrades")){*/
    topLaunchSpeed = get_stat("topLaunchSpeed");//Maximum Launch Speed
    speedBonus = get_stat("speedBonus");        //Initial Speed Multiplier
    drag = get_stat("drag");                    //reduction in horizontal speed
    glide = get_stat("glide");                  //gravity and drag reduction multiplier 0 - normal, 1 - no gravity :O
    bounce = get_stat("bounce");                //multiplier to speed on bounce
    
    jumps = get_stat("jumps");                  //mid air jumps
    jumpSpeed = get_stat("jumpSpeed");          //mid air jump vertical speed
/*} else {
    topLaunchSpeed = 30;//Maximum Launch Speed
    speedBonus = 1;        //Initial Speed Multiplier
    drag = 0.05;                    //reduction in horizontal speed
    glide = 0;                  //gravity and drag reduction multiplier 0 - normal, 1 - no gravity :O
    bounce = 0.7;                //multiplier to speed on bounce
    
    jumps = 0;                  //mid air jumps
    jumpSpeed = 0;          //mid air jump vertical speed
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>GAME STUFFS</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>steps -= 1;

if (steps == 0) { 
    steps = 3; 
    currentStep = (currentStep + 1) % array_length_1d(prevX);
    
    prevX[currentStep] = x;
    prevY[currentStep] = y;
    
    
    cumulativeMomentum = 0;
    cumulativeDirection = 0;
    
    for (var i = 0; i &lt; 3; i++){
        var t = 1 + ((currentStep + i) % (array_length_1d(prevX)-1));
        var dist = point_distance(
            prevX[t],
            prevY[t],
            prevX[t-1],
            prevY[t-1])
        var dir = point_direction(
            prevX[t],
            prevY[t],
            prevX[t-1],
            prevY[t-1])
            
        lastX = prevX[t-1];
        lastY = prevY[t-1];
        cumulativeMomentum = cumulativeMomentum + (dist/10);
    }
}

if (isLaunched){
    vspeed = min(35,vspeed+(0.15*(1-glide)));
    hspeed = max(0, hspeed-drag*(1-glide))
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (animUp &amp;&amp; imgInd &gt;= sprite_get_number(sprite_index)-0.5){
    animUp = 0;
}
else if (!animUp &amp;&amp; imgInd &lt;= 0.5){
    animUp = 1
}

imgInd += (-1 + (animUp * 2))*0.1*isLaunched;
if (speed &lt; 50){
    if (isDuck){
        draw_sprite_ext(spr_roo_duck, imgInd, x, y, 1, 1, rot, c_white, 1);
    }else{
        draw_sprite_ext(spr_roo, imgInd, x, y, 1, 1, rot, c_white, 1);
    }
    if (hasFloaters){
        draw_sprite_ext(spr_roo_floaters, imgInd, x, y, 1, 1, rot, c_white, 1);
    }
} 
else {
    if (isDuck){
        draw_sprite_ext(spr_roo_duck_side, 0, x, y, 1, 1, direction, c_white, 1);
    }else{
        draw_sprite_ext(spr_roo_side, 0, x, y, 1, 1, direction, c_white, 1);
    }
    if (hasFloaters){
        draw_sprite_ext(spr_roo_side_floaters, 0, x, y, 1, 1, direction, c_white, 1);
    }
}
draw_text(x+20, y+60, string(speed));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(vk_space) &amp;&amp; isLaunched){
    if (jumps &gt; 0) {
        jumps -= 1;
        {vspeed += -jumpSpeed}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
